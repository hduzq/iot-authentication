% device_rs_as_app

% --------------------bind--------------------
% Kbind: device<->phone(app)	Kda: device<->as	Kap: as<->phone(app)

% 1. device -> app: Enc(Kbind,SD)

% 2. app -> device: Enc(Kbind,MA||token)


% --------------------authentication--------------------
% 3. device -> AS: SD, Enc(DS,R3)

% 4. AS -> device: Enc(DS,R3||R3)

% 5. device -> AS: Enc(DS,R3)

 
% 6. device -> as: Enc(Kda,MA||token)

% 7. app -> as: Enc(Kap,SD||MA||token||username||H(password))

% 8. as -> device: Enc(Kda,MA||Klocal)

% 9. as -> app: Enc(Kap,SD||salt)



% --------------------same--------------------
% 10. app -> device: MA, Enc(Klocal,R4)

% 11. device -> app: Enc(Klocal,R4||R5)

% 12. app -> device: Enc(Klocal,R5)

% 13. app -> device: T1, Enc(Kdp,M1), HMAC(Kdp, *)

% 14. device -> app: T2, Enc(Kdp,M2), HMAC(Kdp, *)


% --------------------login--------------------
% 15. app -> as: T3, Enc(Kap,SD||MA||username||H(password)), HMAC(Kap,*)

% 16. as -> rs: Enc(Kra,SD||MA||RSid||Kdr||Krp)

% 17. as -> device: Enc(Kda,MA||RSid||Kdr||RSaddr)

% 18. as -> app: Enc(Kap,SD||RSid||Krp||RSaddr) 

% 19. device -> rs: T4, RSid, HMAC(Kdr,*) 

% 20. app -> rs: T5, RSid, HMAC(Krp,*) 

% 21. app -> rs: T6, Enc(Krp,M3), HMAC(Krp,*)

% 22. rs -> device: T7, Enc(Kdr,M3), HMAC(Kdr,*)

% 23. device -> rs: T8, Enc(Kdr,M4), HMAC(Kdr,*)

% 24. rs -> app: T9, Enc(Krp,M4), HMAC(Krp,*) 


% --------------------update--------------------
% 25. app -> as: T10, Enc(Kap,SD||MA||R6||username||H(password)||new_username||H(new_pd)), HMAC(Kap,*)

% 26. as -> device: T11, Enc(Kda,SD||MA||R6||Klocal||temp), HMAC(Kda,*)

% 27. device -> as: Enc(Kda,MA||R6)

% 28. as -> app: Enc(Kap,R6||new_salt)


% --------------------recover--------------------
% 29. device -> as: T12, Enc(Kda,SD||R7), HMAC(Kda,*)

% 30. as -> device: Enc(Kda,R7)


%--------------------role defenition--------------------
role device(SD,RS,AS,MA:agent,DS,Kbind:symmetric_key,Hash:hash_func,SND,RCV:channel(dy))
played_by SD
def=
	local
		State: nat,
		M1, M2, M3, M4, RSadd, RSid, R3, R4, R5, R6, R7, R8, Token, T1, T2, T4, T7, T8, T11, T12: text,
		Klocal, Temp: hash(agent.agent.text.hash(text.hash(text))),
		Kda, Kdp: hash(text.text),
		Kdr: symmetric_key
	init
		State:=0
	transition
% --------------------bind--------------------
		1. State=0 /\ RCV(start) =|>
		   State':=1 /\ SND({SD}_Kbind)

% -----------------------authentication--------------------
		2. State=1 /\ RCV({MA.Token'}_Kbind) =|>
		   State':=2 /\ R3':=new() /\ SND(SD.{R3'}_DS) /\ witness(SD,AS,auth_r3,R3')
					
		3. State=2 /\ RCV({R3.R4'}_DS) =|>
		   State':=3 /\ Kda':=Hash(R3.R4') /\ SND({R4'}_DS) /\ SND({MA.Token}_Kda') /\ request(SD,AS,auth_r4,R4') /\ secret(Kda',sec_kda,{SD,AS})

% --------------------bind--------------------
		4. State=3 /\ RCV({MA.Klocal'}_Kda) =|>
		   State':=4 

% --------------------same--------------------
		5. State=4 /\ RCV(MA.{R5'}_Klocal) =|>
		   State':=5 /\ R6':=new() /\ Kdp':=Hash(R5.R6') /\ SND({R5'.R6'}_Klocal) /\ request(SD,MA,auth_r5,R5') /\witness(SD,MA,auth_r6,R6') /\ secret(Kdp',sec_kdp,{SD,AS})

		6. State=5 /\ RCV({R6}_Klocal) =|>
		   State':=6

		7. State=6 /\ RCV(T1'.{M1'}_Kdp.{Hash(T1'.{M1'}_Kdp)}_Kdp) =|>
		   State':=7 /\ T2':=new() /\ M2':=new() /\ SND(T2'.{M2'}_Kdp.{Hash(T2'.{M2'}_Kdp)}_Kdp) /\ secret(M2',sec_m2,{SD,MA}) /\ request(SD,MA,auth_t1,T1') /\ witness(SD,MA,auth_t2,T2')

% --------------------login--------------------
		8. State=7 /\ RCV({MA.RSid'.Kdr'.RSadd'}_Kda) =|>
		   State':=8 /\ T4':=new() /\ SND(T4'.RSid'.{Hash(T4'.RSid')}_Kdr') /\ witness(SD,RS,auth_t4,T4')

		9. State=8 /\ RCV(T7'.{M3'}_Kdr.{Hash(T7'.{M3'}_Kdr)}_Kdr) =|>
		   State':=9 /\ T8':=new() /\ M4':=new()
					 /\ SND(T8'.{M4'}_Kdr.{Hash(T8'.{M4'}_Kdr)}_Kdr)
					 /\ secret(M4',sec_m4,{SD,RS,MA}) /\ request(SD,MA,auth_t7,T7') /\ witness(SD,RS,auth_t8,T8')

% --------------------update--------------------
		10. State=9 /\RCV(T11'.{SD.MA.R7'.Klocal.Temp'}_Kda.{Hash(T11'.{SD.MA.R7'.Klocal.Temp'}_Kda)}_Kda) =|>
		   State':=10 /\ SND({MA.R7'}_Kda) /\ T12':=new() /\ R8':=new() /\ SND(T12'.{SD.R8'}_Kda.{Hash(T12'.{SD.R8'}_Kda)}_Kda) /\ witness(SD,AS,auth_r8,R8') /\ request(SD,AS,auth_t11,T11')  /\ witness(SD,AS,auth_t12,T12')

% --------------------recover--------------------
		11. State=10  /\ RCV({R8'}_Kda) =|>
		   State':=11
end role

%------------------------------------------------------------

role authserver(AS,SD,RS,MA:agent,DS,Kap,Kra:symmetric_key,Hash:hash_func,SND,RCV:channel(dy))
played_by AS
def=
	local 
		State: nat,
		NewSalt, NewUsername, RSid, RSadd, R3, R4, R7, R8, Salt, Token, T3, T10, T11, T12, Username: text,
		Kdr, Krp: symmetric_key,
		HPassword, LoginHPassword, NewHPassword: hash(text),
		Kda: hash(text.text),
		Spd: hash(text.hash(text)),
		Klocal, Temp: hash(agent.agent.text.hash(text.hash(text)))
	init
		State:=0
	transition
% --------------------authentication--------------------
		1. State=0 /\ RCV(SD.{R3'}_DS) =|>
		   State':=1 /\ R4':=new() /\ Kda':=Hash(R3.R4')
					/\ SND({R3'.R4'}_DS) /\ witness(AS,SD,auth_r4,R4') /\ secret(Kda',sec_kda,{SD,AS})

		2. State=1 /\ RCV({R4}_DS) =|>
		   State':=2 /\ request(AS,SD,auth_r3,R3)

% --------------------bind--------------------
		3. State=2 /\ RCV({MA.Token'}_Kda) =|>
		   State':=3 

		4. State=3 /\ RCV({SD.MA.Token'.Username'.HPassword'}_Kap) =|>
		   State':=4 /\ Salt':=new() /\ Spd':=Hash(Salt'.HPassword')
					/\ Klocal':=Hash(SD.MA.Username.Spd')
					/\ SND({MA.Klocal'}_Kda)
					/\ SND({SD.Salt'}_Kap)
					/\ request(AS,MA,app_as_token,Token')
					/\ secret(Klocal', sec_klocal,{SD,MA,AS})

% --------------------login--------------------
		5. State=4 /\ RCV(T3'.{SD.MA.Username.LoginHPassword'}_Kap.{Hash(T3'.{SD.MA.Username.LoginHPassword'}_Kap)}_Kap)
					/\ Spd=Hash(Salt.LoginHPassword') =|>
		   State':=5 /\ RSid':=new() /\ Kdr':=new() /\ Krp':=new() /\ RSadd':=new()
					/\ SND({SD.MA.RSid'.Kdr.Krp}_Kra)
					/\ SND({MA.RSid'.Kdr.RSadd'}_Kda)
					/\ SND({SD.RSid'.Krp.RSadd'}_Kap)
 					/\ request(AS,MA,auth_t3,T3')
					/\ secret(Kdr',sec_kdr,{AS,SD,RS})
					/\ secret(Krp',sec_krp,{AS,RS,MA})

% --------------------update--------------------
		6. State=5 /\ RCV(T10'.{SD.MA.R7'.Username.LoginHPassword'.NewUsername'.NewHPassword'}_Kap.{Hash(T10'.{SD.MA.R7'.Username.LoginHPassword'.NewUsername'.NewHPassword'}_Kap)}_Kap) 
					/\ Spd=Hash(Salt.LoginHPassword')=|>
		   State':=6 /\ NewSalt':=new() 
					/\ T11':=new() /\ Temp':=Hash(SD.MA.NewUsername'.Hash(NewSalt'.NewHPassword'))
					/\ SND(T11'.{SD.MA.R7'.Klocal.Temp'}_Kda.{Hash(T11'.{SD.MA.R7'.Klocal.Temp'}_Kda)}_Kda)
					 /\ request(AS,MA,auth_t10,T10') /\ witness(AS,SD,auth_t11,T11') /\ secret(Temp',sec_temp,{SD.AS.MA})

		7. State=6 /\ RCV({MA.R7}_Kda) =|>
		   State':=7 /\ Username':=NewUsername /\ HPassword':=NewHPassword 
					/\ Spd':=Hash(Salt.HPassword')/\ SND({R7.NewSalt}_Kap) /\ request(AS,MA,auth_r7,R7)

% --------------------recover--------------------	
		8. State=7 /\ RCV(T12'.{SD.R8'}_Kda.{Hash(T12'.{SD.R8'}_Kda)}_Kda)=|>
		   State':=8 /\ SND({R8'}_Kda) /\ request(AS,SD,auth_r8,R8')  /\ request(AS,SD,auth_t12,T12')


end role

%------------------------------------------------------------

role app(MA,SD,RS,AS:agent,Kbind,Kap:symmetric_key,Hash:hash_func,SND,RCV:channel(dy))
played_by MA
def=
	local 
		State: nat,
		M1, M2, M3, M4, NewPassword, NewSalt, NewUsername, Password, RSadd, RSid, R5, R6, R7,
		Salt, Token, T1, T2, T3, T5, T6, T9, T10, Username: text,
		Krp: symmetric_key,
		Kdp: hash(text.text),
		HPassword, NewHPassword: hash(text),
		Klocal: hash(agent.agent.text.hash(text.hash(text)))
	init
		State:=0
	transition
% --------------------bind--------------------
		1. State=0 /\ RCV({SD}_Kbind) =|>
		   State':=1 /\ Token':=new() /\ SND({MA.Token'}_Kbind)
					 /\ Username':=new() /\ Password':=new() /\ HPassword':=Hash(Password')
					 /\ SND({SD.MA.Token'.Username'.HPassword'}_Kap) 
					/\ secret(Username',sec_un,{MA,AS}) /\ secret(HPassword',sec_hpw,{MA,AS})
					/\ witness(MA,AS,app_as_token,Token')

% --------------------same--------------------
		2. State=1 /\ RCV({SD.Salt'}_Kap) =|>
		   State':=2 /\ R5':=new() /\ Klocal':=Hash(SD.MA.Username.Hash(Salt'.Hash(Password))) /\ SND(MA.{R5'}_Klocal')
					 /\ witness(MA,SD,auth_r5,R5')

		3. State=2 /\ RCV({R5.R6'}_Klocal) =|>
		   State':=3 /\ Kdp':=Hash(R5.R6') /\ SND({R6'}_Klocal) /\ request(MA,SD,auth_r6,R6')
					 /\ T1':=new() /\ M1':=new() /\ SND(T1'.{M1'}_Kdp'.{Hash(T1'.{M1'}_Kdp')}_Kdp') 
					 /\ secret(M1',sec_m1,{SD,MA}) /\ witness(MA,SD,auth_t1,T1')

% --------------------login--------------------
		4. State=3 /\ RCV(T2'.{M2'}_Kdp.{Hash(T2'.{M2'}_Kdp)}_Kdp) =|>
		   State':=4/\ T3':=new() /\ SND(T3'.{SD.MA.Username.HPassword}_Kap
					.{Hash(T3'.{SD.MA.Username.HPassword}_Kap)}_Kap) 
					/\ request(MA,SD,auth_t2,T2') /\ witness(MA,AS,auth_t3,T3')

		5. State=4 /\ RCV({SD.RSid'.Krp'.RSadd'}_Kap) =|>
		   State':=5 /\ T5':=new() /\ SND(T5'.RSid'.{Hash(T5'.RSid')}_Krp') /\ witness(MA,RS,auth_t5,T5')
					/\ T6':=new() /\ M3':=new()
					/\ SND(T6'.{M3'}_Krp.{Hash(T6'.{M3'}_Krp)}_Krp)
					/\ witness(MA,RS,auth_t6,T6') /\ secret(M3',sec_m3,{MA,RS,SD})

% --------------------update--------------------
		6. State=5 /\ RCV(T9'.{M4'}_Krp.{Hash(T9'.{M4'}_Krp)}_Krp) =|>
		   State':=6 	/\ request(MA,RS,auth_t9,T9')
						/\ T10':=new() /\ NewUsername':=new() /\ NewPassword':=new() /\ R7':=new()
						/\ NewHPassword':=Hash(NewPassword')
						/\SND(T10'.{SD.MA.R7'.Username.HPassword.NewUsername'.NewHPassword'}_Kap
						.{Hash(T10.{SD.MA.R7'.Username.HPassword.NewUsername'.NewHPassword'}_Kap)}_Kap) 
						/\ witness(MA,AS,auth_r7,R7') /\ witness(MA,AS,auth_t10,T10')
						/\ secret(NewUsername',sec_new_un,{MA,SD,AS}) 
						/\ secret(NewHPassword',sec_new_hpw,{MA,AS})

		7. State=6 /\ RCV({R7.NewSalt'}_Kap) =|>
		   State':=7  

end role

%------------------------------------------------------------

role relaycommandserver(RS,SD,AS,MA:agent,Kra:symmetric_key,Hash:hash_func,SND,RCV:channel(dy))
played_by RS
def=
	local
		State: nat,
		M3, M4, RSid, T4, T5, T6, T7, T8, T9: text,
		Kdr, Krp: symmetric_key
	init
		State:=0
	transition
% --------------------login--------------------
		1. State=0 /\ RCV({SD.MA.RSid'.Kdr'.Krp'}_Kra) =|>
		   State':=1

		2. State=1 /\ RCV(T4'.RSid'.{Hash(T4'.RSid')}_Kdr) =|>
		   State':=2 /\ request(RS,MA,auth_t4,T4')

		3. State=2 /\ RCV(T5'.RSid'.{Hash(T5'.RSid')}_Krp) =|>
		   State':=3 /\ request(RS,MA,auth_t5,T5')

		4. State=3 /\ RCV(T6'.{M3'}_Krp.{Hash(T6'.{M3'}_Krp)}_Krp) =|>
		   State':=4 /\ T7':=new() /\ SND(T7'.{M3'}_Kdr.{Hash(T7'.{M3'}_Kdr)}_Kdr) /\ request(RS,MA,auth_t6,T6') /\ witness(RS,SD,auth_t7,T7')

		5. State=4 /\ RCV(T8'.{M4'}_Kdr.{Hash(T8'.{M4'}_Kdr)}_Kdr) =|>
		   State':=5 /\ T9':=new() /\ SND(T9'.{M4'}_Krp.{Hash(T9'.{M4'}_Krp)}_Krp) /\ request(RS,SD,auth_t8,T8') /\ witness(RS,SD,auth_t9,T9')

end role

%------------------------------------------------------------

role session(SD,RS,AS,MA:agent,DS,Kbind,Kap,Kra:symmetric_key,Hash:hash_func)
def=
	local
        SND4,RCV4,SND3,RCV3,SND2,RCV2,SND1,RCV1:channel(dy)
    composition
        device(SD,RS,AS,MA,DS,Kbind,Hash,SND1,RCV1) /\
		relaycommandserver(RS,SD,AS,MA,Kra,Hash,SND4,RCV4) /\
        authserver(AS,SD,RS,MA,DS,Kap,Kra,Hash,SND2,RCV2) /\
		app(MA,SD,RS,AS,Kbind,Kap,Hash,SND3,RCV3)
end role

%------------------------------------------------------------

role environment()
def=
    const
        sd1,sd2,rs,as,ma1,ma2:agent,
        ds1,ds2,kbind1,kap1,kbind2,kap2,kra,kia,kbindi,dsi:symmetric_key,
		myhash:hash_func,
		sec_kda,sec_un,sec_hpw,sec_klocal,
		sec_kdp,sec_m1,sec_m2,sec_kdr,sec_krp,sec_m3,sec_m4,app_as_token,
		sec_new_un,sec_new_hpw,sec_temp,
		auth_t1,auth_t2,auth_t3,auth_t4,auth_t5,auth_t6,auth_t7,auth_t8,auth_t9,auth_t10,auth_t11,auth_t12,
		auth_r3,auth_r4,auth_r5,auth_r6,auth_r7,auth_r8:protocol_id

    intruder_knowledge = {sd1, ma1, sd2, ma2, as, rs, myhash, kbindi, kia, dsi}
    composition
        session(sd1,rs,as,ma1,ds1,kbind1,kap1,kra,myhash)
        %/\ session(sd1,rs,as,i,ds1,kbindi,kia,kra,myhash)
        %/\ session(i,rs,as,ma1,dsi,kbindi,kap1,kra,myhash)
        %/\ session(sd1,i,as,ma1,ds1,kbind1,kap1,kra,myhash)
end role

%------------------------------------------------------------

goal
    secrecy_of sec_kda,sec_un,sec_hpw,sec_klocal,
			   sec_kdp,sec_m1,sec_m2,sec_kdr,sec_krp,sec_m3,sec_m4,sec_new_un,sec_new_hpw,sec_temp
    authentication_on app_as_token,auth_r3,auth_r4,auth_r5,auth_r6,auth_r7,auth_r8,
					  auth_t1,auth_t2,auth_t3,auth_t4,auth_t5,auth_t6,auth_t7,auth_t8,auth_t9,auth_t10,auth_t11,auth_t12
end goal

%------------------------------------------------------------

environment()